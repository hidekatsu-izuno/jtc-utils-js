export function isWindows31J(value: any) {
  if (!value || typeof value !== "string") {
      return false
  }

  for (let i = 0; i < value.length; i++) {
      const n = value.codePointAt(i);
      if (!isWindows31JChar(n)) {
          return false
      }
  }

  return true
}

const M = new Map<number, number>([
  [0, 0],
  [1, 11],
  [8, 15],
  [9, 30],
  [12, 41],
  [19, 58],
  [20, 75],
  [21, 108],
  [22, 141],
  [23, 174],
  [24, 207],
  [25, 240],
  [26, 273],
  [27, 306],
  [28, 339],
  [29, 372],
  [30, 405],
  [31, 438],
  [32, 467],
  [33, 500],
  [34, 533],
  [35, 563],
  [36, 593],
  [37, 626],
  [38, 653],
  [39, 683],
  [62, 709],
  [63, 714],
])

const A = new Uint32Array([
  /*key: 0*/
  0xf700000e,
  0xffffffff,
  0xffffffff,
  0xffffffff,
  0xffffffff,
  0x3599cf90,
  0x100,
  0x100,
  0x7fff,
  0xdfc07fff,
  0xdfc00000,
  /*key: 1*/
  0xe0000000,
  0x4000ffff,
  0xffffffff,
  0xffff4000,
  /*key: 8*/
  0xc0dafc80,
  0x84cc,
  0xc600b012,
  0x10000200,
  0x40100000,
  0xffc0ffc0,
  0xf000,
  0x2800,
  0xb1904027,
  0x85fa0c04,
  0x2000,
  0xc3300000,
  0x33000000,
  0x4000001,
  0x2000,
  /*key: 9*/
  0x10e7b000,
  0xfffff000,
  0xf009999c,
  0x9c999999,
  0x20100000,
  0xc000300c,
  0x3130000,
  0x10000,
  0x6000000,
  0xa0000000,
  0x250000,
  /*key: 12*/
  0xbf0044fe,
  0xf7fffc05,
  0x7fffffff,
  0xffffffff,
  0xfffff81e,
  0x7fffffff,
  0xffffffff,
  0xfffffe1e,
  0x6040,
  0xf800000,
  0x10040880,
  0x33100210,
  0x644100,
  0x1e,
  0x3000e,
  0x40000000,
  0x8040000,
  /*key: 19*/
  0xffff,
  0xd1f6cfc2,
  0x42a462d9,
  0x341707c7,
  0x20005002,
  0xa6fa6cdb,
  0xee9e9220,
  0xeb370fc7,
  0x5c06a318,
  0xd067c02c,
  0x18aec,
  0x1307d77e,
  0x419619,
  0x12b56ab4,
  0xc0170601,
  0x3866c9b5,
  0x5c0316a3,
  /*key: 20*/
  0xffffffff,
  0x6556a63,
  0x7efc0240,
  0xb3c18628,
  0x408ae84,
  0x840448e0,
  0xc3d02,
  0x246546a2,
  0x15060c50,
  0xe8402ea1,
  0x40202139,
  0xdffea828,
  0x2cfe4788,
  0xa66df744,
  0xaef8ff06,
  0xe5c021c,
  0xc36cc6e6,
  0x9bb24d04,
  0xd6293f0,
  0x193d0a12,
  0x1c61fc05,
  0x11c46819,
  0x927d4c4a,
  0xd54425d7,
  0xbb0034e3,
  0xe7858764,
  0xd82150f1,
  0xd7e479aa,
  0x8243fd91,
  0x280012a1,
  0x86c6b210,
  0x30fe0b55,
  0x7cfff3a0,
  /*key: 21*/
  0xffffffff,
  0x58ffc015,
  0x825e02de,
  0xa2e24001,
  0xa0d71c,
  0x8a3ba008,
  0x2cd9308e,
  0xe9c00080,
  0x66c62025,
  0xb018a00,
  0x350c2,
  0x8e09130c,
  0x1000001a,
  0x9b7000ef,
  0x1fa8200,
  0xd000829,
  0x18000146,
  0x2400b90,
  0x416a80,
  0x200a8010,
  0x8b808a0,
  0x83210800,
  0xa4020a08,
  0xf08251b2,
  0x9002b065,
  0x98d53289,
  0x3848190,
  0xa123c040,
  0x4e600001,
  0x20d01000,
  0xb8289000,
  0x93923a09,
  0x90000968,
  /*key: 22*/
  0xffffffff,
  0xa6300444,
  0x4821cc24,
  0xc03069e2,
  0x2050a442,
  0x1400110b,
  0x9230f2,
  0x452855cb,
  0xc1be17c,
  0x207186f8,
  0x257e6182,
  0x9c3ddb4,
  0xb5ea1884,
  0x78241254,
  0x1c882072,
  0x250d868,
  0x6b00211,
  0x504040a9,
  0x84410608,
  0xc2400020,
  0x22280001,
  0x2030,
  0xe,
  0x60588300,
  0x52400030,
  0x580200,
  0x2028a202,
  0x9400cfbd,
  0x1e50d4a0,
  0x95dd05fd,
  0x3e029ec1,
  0xbf48b897,
  0x6fda96a3,
  /*key: 23*/
  0xffffffff,
  0x6ff75222,
  0xa88440ff,
  0xc6b7d402,
  0xcc0b4240,
  0x8c800,
  0x42d853ba,
  0x5000040,
  0xc0e58634,
  0x1124ff1,
  0x21400000,
  0x201ab008,
  0x4d1200,
  0x29188004,
  0x200a01ec,
  0x4cb216,
  0x57927d16,
  0x32184274,
  0x4159384,
  0x9d0a0d01,
  0x78003eff,
  0x59210728,
  0x83140780,
  0x70e19235,
  0xf0c8dbbb,
  0x587ddf91,
  0x47454d8a,
  0x44aa534c,
  0x637cd149,
  0xfdb8f1c2,
  0xc0e6194c,
  0x140c03ce,
  0x8810c495,
  /*key: 24*/
  0xffffffff,
  0x3a65c,
  0xc7f14020,
  0x7234a465,
  0xbcfd8500,
  0x5c7c2b31,
  0x93603e8c,
  0x70054ab,
  0xd180fb70,
  0xd2c74431,
  0xc188890f,
  0x29be14e5,
  0x3593df02,
  0x2122cae0,
  0x95a2222,
  0x13fc8000,
  0x12002baf,
  0x80eefa37,
  0x4223b891,
  0xc1d61492,
  0x9082424b,
  0xb8607f9a,
  0x218445c,
  0x27edf9dc,
  0xc00f5703,
  0x61c84041,
  0x1910027,
  0x4d8508,
  0x1d22330,
  0x90cb2291,
  0xf5f82c12,
  0x9a41a230,
  0x50420e20,
  /*key: 25*/
  0xffffffff,
  0x2051308,
  0x28c0a22,
  0x20020080,
  0x814102a0,
  0x10803426,
  0xc56a058,
  0x650628a0,
  0xf3096a26,
  0x8400008c,
  0x18390fd3,
  0x48747c6,
  0x3208ad80,
  0x31cac159,
  0x4d1d814c,
  0x5e192150,
  0xe7cc4030,
  0xb36b1c0b,
  0x8d874e19,
  0x78512147,
  0x2fc39a20,
  0x59c243c4,
  0xa21228cb,
  0x4940026c,
  0x8240bdff,
  0x90d70f17,
  0x3be4ba5,
  0x4243d24b,
  0xfe25f50b,
  0x558852c,
  0xe2411bd0,
  0xca23d8a6,
  0x294b5c13,
  /*key: 26*/
  0xffffffff,
  0x78001302,
  0x607028cc,
  0xfa86f84d,
  0x11000b03,
  0x54051915,
  0xa385d668,
  0xaf52da1,
  0xd1032060,
  0xcc9f2078,
  0x76a08a45,
  0x201c6e,
  0xe0b71dce,
  0x60224c98,
  0x81026813,
  0x513e90c6,
  0x21942055,
  0x24383953,
  0x707286e4,
  0xb9000c1,
  0x62103083,
  0x88068108,
  0xb02a1090,
  0x70005033,
  0x28a00030,
  0xc202205,
  0xd10021e6,
  0x114a9851,
  0x7a6118d1,
  0x9a740682,
  0x8317d39,
  0x86163a91,
  0x191000,
  /*key: 27*/
  0xffffffff,
  0x815910,
  0x18000983,
  0xe002852f,
  0xa0a1b026,
  0x728cb270,
  0x601250ff,
  0x4c681574,
  0x74a1d000,
  0x8182153,
  0x4703696,
  0x4c000068,
  0x1a6b09c0,
  0x58a1658,
  0x92488,
  0x871964c2,
  0x4aba75f8,
  0x5f01475,
  0xdf5f00ea,
  0x10260299,
  0x1132203,
  0xa009828d,
  0x24212325,
  0x2c585c06,
  0x92983,
  0x62415c00,
  0xb0186083,
  0x44000899,
  0xa0788a8,
  0xea824100,
  0x58205440,
  0xf2000c91,
  0xc81b5622,
  /*key: 28*/
  0xffffffff,
  0x455144b7,
  0x388a002,
  0x84080,
  0x1011808c,
  0x4622040,
  0x1f10f0,
  0x910045,
  0x4044,
  0x8410868,
  0x42000208,
  0x34a0648,
  0x2f4a0004,
  0x8a10c41,
  0x884042,
  0x50c2ad01,
  0x870e045b,
  0x2048010,
  0xaca63f,
  0x839820d5,
  0x61402846,
  0xe1002200,
  0xa1096242,
  0x3a02a150,
  0xe04c01cc,
  0x20031d,
  0xc730b03,
  0xc030100,
  0x10a0a5b0,
  0x9500200,
  0x403014,
  0xa0e62202,
  0x94264482,
  /*key: 29*/
  0xffffffff,
  0x17400000,
  0x26623e21,
  0x4000047b,
  0xb8619202,
  0x10500003,
  0x21008004,
  0x210808,
  0xb342e380,
  0x5c0e54ab,
  0x1699f1b8,
  0xa7d487c,
  0xaf759b81,
  0x23734824,
  0x141074ce,
  0x35242cd2,
  0x3040b82b,
  0x40540001,
  0xe9008810,
  0x23882288,
  0x61e8a2be,
  0xbb92927a,
  0x20289e1,
  0x32a4231b,
  0x5d222892,
  0x49d80013,
  0x8e4001a8,
  0x83000030,
  0x56900043,
  0x124002,
  0x840c925d,
  0x1040138,
  0x35471008,
  /*key: 30*/
  0xffffffff,
  0x20082c00,
  0xc7002821,
  0x4020004,
  0x8192828,
  0x430e5520,
  0x1161042a,
  0x4630c820,
  0x1890804,
  0x41026040,
  0x238802a,
  0xc1c09727,
  0xa4840121,
  0xcc270814,
  0x3229067,
  0xc0506481,
  0x5b488010,
  0x809609e9,
  0x8002611f,
  0xb2478100,
  0x70508a65,
  0x58803781,
  0x638221,
  0x1db5746d,
  0xf73582e1,
  0x2ab140d2,
  0x86881640,
  0x6ddea04,
  0x50acc20,
  0x3152def,
  0x40244880,
  0xcb590004,
  0x8e441300,
  /*key: 31*/
  0xfffff87f,
  0x81047901,
  0x51300187,
  0x900d8a81,
  0x8c081402,
  0x7054a591,
  0x6d967046,
  0xa422228b,
  0xa1012ab2,
  0xae348df8,
  0xe01bb461,
  0x3e9b821a,
  0x72827644,
  0x411079,
  0xb01fedb7,
  0x13166ae,
  0xc8c92810,
  0x4c702013,
  0x72126576,
  0x52342e66,
  0x364805d,
  0x30ebba18,
  0x2a0,
  0x50ecc81,
  0x81f2a5c0,
  0x37aa0826,
  0x58c322c4,
  0x46282c00,
  0xc2509058,
  /*key: 32*/
  0xffffffff,
  0xde18a5c8,
  0x40801215,
  0x22022a3,
  0x6081bb47,
  0xf5812b4,
  0x646d6820,
  0x1a0a0276,
  0x4c01488c,
  0x27e00030,
  0x10415042,
  0x212dc01,
  0x612c8e1,
  0xb0a1142c,
  0x98c094a7,
  0xa2c450e1,
  0x95a4183a,
  0x65eea39b,
  0x7a17c0,
  0x810000e5,
  0x2ab36382,
  0x142045,
  0x61d50d4,
  0x400795b,
  0x57105870,
  0x7e420388,
  0x10916ec0,
  0x8461a080,
  0x20001519,
  0x5621223,
  0xa0b04404,
  0x452a1289,
  0x8051eb14,
  /*key: 33*/
  0xffffffff,
  0x191e1000,
  0xa068448c,
  0x2c20110,
  0x725f4560,
  0x28108849,
  0x400428d9,
  0x4a74c268,
  0xa0809,
  0x82005da1,
  0x420c0404,
  0xd0f215e0,
  0x10f40102,
  0x89a0c958,
  0xafb8060,
  0x4045840c,
  0xc600172,
  0x23301320,
  0x20058001,
  0x68c2b,
  0x1104050,
  0x381400,
  0x18718200,
  0xb560853,
  0x84f00d2,
  0xb2e460a8,
  0x4400911,
  0x5a1541,
  0x92a20a81,
  0x20040001,
  0x20111034,
  0x8b10a000,
  0x80012352,
  /*key: 34*/
  0xfffffff8,
  0x5074600,
  0x71004250,
  0xaa0c3156,
  0x7090a507,
  0x60942342,
  0x2812cd01,
  0x7c010ccd,
  0x40803cce,
  0x2928b00e,
  0x4300290,
  0x580c0203,
  0x8a252903,
  0x53b113a0,
  0x43693025,
  0x8000202c,
  0x13000880,
  0xb0aab395,
  0x14245b38,
  0x4280ec12,
  0xb25ef048,
  0x2d4c54a2,
  0xdf8ca04b,
  0x291d223b,
  0xeb1653a2,
  0xe90a8b74,
  0xc2981042,
  0x404b12b9,
  0x219e905,
  0x902ab260,
  /*key: 35*/
  0x7f9fffff,
  0x121,
  0x42aa8420,
  0x603800e8,
  0x246e0886,
  0xe1ffbb9d,
  0xf9a6503a,
  0xba24883c,
  0xdb5ba00,
  0xb14db00,
  0x44200040,
  0x10801022,
  0x20190235,
  0x50b11409,
  0xe18007,
  0x208c00,
  0x29e88441,
  0x98002a08,
  0x4d345840,
  0x4039c002,
  0x6bd2011,
  0x3010009e,
  0x14683c5d,
  0x26110d3,
  0x2e4e0109,
  0x78000000,
  0x1b,
  0x1187e139,
  0x2c024820,
  0x267589e4,
  /*key: 36*/
  0xffffffff,
  0xd617df67,
  0xf10266ca,
  0x6577feca,
  0xd5c727ad,
  0xf9614000,
  0x12a14480,
  0x40220012,
  0x68840504,
  0x20002440,
  0x104a000,
  0x7e2a80,
  0x34683580,
  0x2154a108,
  0x28310ca0,
  0xc3dfc3bf,
  0x5f060609,
  0x226cc02,
  0x480969,
  0x8cd2c172,
  0x2b004182,
  0x948056b8,
  0x1040140,
  0x1b540,
  0x896430f9,
  0x220180e6,
  0xf69b2430,
  0x8940b18,
  0x800a840a,
  0x80b20,
  0x90e8040,
  0x1280c386,
  0x4c800080,
  /*key: 37*/
  0xf81fffff,
  0x110098e0,
  0x401046a0,
  0x4c807032,
  0xa020850f,
  0x40000000,
  0x100,
  0xb1717ac0,
  0xbd84205a,
  0x112c0e88,
  0x64000000,
  0x8,
  0x40a32011,
  0xa81d801f,
  0x3e28b7a4,
  0x6b70ddc,
  0x91a1ebd8,
  0xcf5e4658,
  0x30b0a350,
  0x8ba7524a,
  0x920b0d6,
  0x3ac5664a,
  0xead44868,
  0x4e158088,
  0x92941800,
  0x12901008,
  0x63611,
  /*key: 38*/
  0xf7eff7ff,
  0x7689f1a0,
  0x480c099c,
  0x21f0d92,
  0x511d800,
  0xa14200,
  0x1a000019,
  0x2057280e,
  0x1468b886,
  0xc98a0006,
  0x2458e500,
  0x3c2,
  0x48e1808,
  0x4e80e495,
  0x20066091,
  0x44033040,
  0x908102,
  0xb4060531,
  0x2c700000,
  0x848088,
  0x880158cb,
  0x32374910,
  0x20000a1,
  0x35e36018,
  0x7c0748a0,
  0x12c00,
  0x10037301,
  0x80b64850,
  0x82616a10,
  0x7880e400,
  /*key: 39*/
  0xf1ff9ffc,
  0x8aecbc10,
  0x4c07a072,
  0x3802120,
  0x81000280,
  0x5589a00,
  0x13c22411,
  0x12b80013,
  0x4a80c04e,
  0xc819a020,
  0x1410020,
  0x85128b0,
  0x6a011040,
  0x20520e4,
  0x72,
  0x4c5,
  0x40987505,
  0x66400fb,
  0x80fe8de,
  0x84810b5c,
  0x1821400,
  0xc0080012,
  0x332801,
  0xf3282300,
  0x4040c,
  0x80000000,
  /*key: 62*/
  0x42c000,
  0x400000,
  0x8,
  0x3ffff,
  0xfffc0000,
  /*key: 63*/
  0xf9,
  0x7fffffff,
  0xffffffff,
  0xfffffffe,
  0x7fffffff,
  0xffffffff,
  0xfc000000,
])

function isWindows31JChar(n?: number) {
  if (n == null) {
    return false
  }

  const b0 = (n & 0b111111_00000_00000) >>> 10
  const b1 = (n & 0b000000_11111_00000) >>> 5
  const b2 = (n & 0b000000_00000_11111)

  const pos0 = M.get(b0)
  if (pos0 != null) {
    const pat0 = A[pos0]
    if ((pat0 & (1 << (31 - b1))) !== 0) {
      const pos1 = bitcount(pat0 >>> (31 - b1))
      if (pos1 !== 0) {
        const pat1 = A[pos0 + pos1]
        return (pat1 & (1 << (31 - b2))) !== 0
      }
    }
  }

  return false
}

function bitcount(n: number) {
  n = n - ((n >>> 1) & 0x55555555);
  n = (n & 0x33333333) + ((n >>> 2) & 0x33333333);
  n = (n + (n >>> 4)) & 0x0f0f0f0f;
  n = n + (n >>> 8);
  n = n + (n >>> 16);
  return n & 0x3f;
}
