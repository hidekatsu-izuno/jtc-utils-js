import { Encoder } from "./encoder.js"

const EBCDIC_MAP = Uint8Array.of(
  // 0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
  0x00, 0x01, 0x02, 0x03, 0x37, 0x2D, 0x2E, 0x2F, 0x16, 0x05, 0x15, 0x0B, 0x0C, 0x0D, 0x0F, 0x0F, // 0
  0x10, 0x11, 0x12, 0x13, 0x3C, 0x3D, 0x32, 0x26, 0x18, 0x19, 0x3F, 0x27, 0x1C, 0x1D, 0x1E, 0x1F, // 1
  0x40, 0x5A, 0x7F, 0x7B, 0xE0, 0x6C, 0x50, 0x7D, 0x4D, 0x5D, 0x5C, 0x3E, 0x6B, 0x60, 0x4B, 0x61, // 2
  0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0x7A, 0x5E, 0x4C, 0x7E, 0x6E, 0x6F, // 3
  0x7C, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, // 4
  0xD7, 0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0x70, 0xB2, 0x80, 0xB0, 0x6D, // 5
  0x79, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, // 6
  0x78, 0x8B, 0x9B, 0xAB, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xC0, 0x4F, 0xD0, 0xA0, 0x07, // 7
  0x20, 0x21, 0x22, 0x23, 0x24, 0x15, 0x06, 0x17, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x09, 0x0A, 0x1B, // 8
  0x30, 0x31, 0x1A, 0x33, 0x34, 0x35, 0x36, 0x08, 0x38, 0x39, 0x3A, 0x3B, 0x04, 0x14, 0x3E, 0xFF, // 9
)
const KANA_MAP = Uint8Array.of(
  // 0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
  0x0F, 0x41, 0x42, 0x43, 0x45, 0x46, 0x47, 0x48, 0x49, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x58, // FF60
  0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, // FF70
  0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9D, 0x9E, 0x9F, 0xA2, 0xA3, 0xA4, 0xA5, // FF80
  0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAC, 0xAC, 0xAD, 0xAE, 0xAF, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, // FF90
)

export class Cp930Encoder implements Encoder {
  private fatal

  constructor(options?: { fatal?: boolean }) {
    this.fatal = options?.fatal ?? true
  }

  canEncode(str: string) {
    for (let i = 0; i < str.length; i++) {
      const cp = str.charCodeAt(i)
      if (cp <= 0x9F) { // ASCII + α
        const b = EBCDIC_MAP[cp]

      } else {
      }
    }
    return true
  }

  encode(str: string): Uint8Array {
    const out = new Uint8Array(str.length * 2)
    let pos = 0
    for (let i = 0; i < str.length; i++) {
      const cp = str.charCodeAt(i)
      let fail = false
      if (cp <= 0x9F) { // ASCII + Latin-1 Supplement
        const b = EBCDIC_MAP[cp]
        if (b != 0x0F) {
          out[pos++] = b
        } else {
          fail = true
        }
      } else if (cp >= 0xFF61 && cp <= 0xFF9F) { // 半角カナ
        const b = KANA_MAP[cp - 0xFF60]
        if (b != 0x0F) {
          out[pos++] = b
        } else {
          fail = true
        }
      } else {

      }

      if (fail) {
        if (this.fatal) {
          throw TypeError(`The code point ${cp.toString(16)} could not be encoded`)
        } else {
          out[pos++] = 0x40 // SP
        }
      }
    }
    return out.subarray(0, pos)
  }
}
